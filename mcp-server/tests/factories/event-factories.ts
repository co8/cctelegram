/**
 * Event Factory Definitions
 * 
 * Factory definitions for all CCTelegram event types using the factory-bot pattern
 */

import { Factory, FactoryUtils, Sequences } from './factory-bot.js';
import { CCTelegramEvent, EventType, EventData } from '../../src/types.js';

/**
 * Base event factory with common properties
 */
Factory.define<CCTelegramEvent>('event', () => ({
  type: 'info_notification' as EventType,
  source: 'claude-code',
  timestamp: new Date().toISOString(),
  task_id: Factory.sequence('taskId'),
  title: 'Test Event',
  description: 'This is a test event generated by the factory',
  data: {}
}), {
  traits: {
    // Task management events
    task_completion: (event) => ({
      ...event,
      type: 'task_completion',
      title: 'Task Completed Successfully',
      description: 'The assigned task has been completed',
      data: {
        status: 'completed',
        results: 'All objectives achieved',
        duration_ms: FactoryUtils.randomNumber(1000, 300000),
        files_affected: [
          FactoryUtils.randomFilePath('ts'),
          FactoryUtils.randomFilePath('js')
        ]
      }
    }),

    task_failed: (event) => ({
      ...event,
      type: 'task_failed',
      title: 'Task Failed',
      description: 'The assigned task could not be completed',
      data: {
        status: 'failed',
        error_message: FactoryUtils.randomErrorMessage(),
        duration_ms: FactoryUtils.randomNumber(5000, 60000)
      }
    }),

    task_started: (event) => ({
      ...event,
      type: 'task_started',
      title: 'Task Started',
      description: 'Beginning work on assigned task',
      data: {
        status: 'in_progress'
      }
    }),

    // Code operation events
    code_generation: (event) => ({
      ...event,
      type: 'code_generation',
      title: 'Code Generated',
      description: 'New code has been generated successfully',
      data: {
        files_affected: Array.from({ length: FactoryUtils.randomNumber(1, 5) }, () => 
          FactoryUtils.randomFilePath()
        )
      }
    }),

    code_refactoring: (event) => ({
      ...event,
      type: 'code_refactoring',
      title: 'Code Refactored',
      description: 'Code has been refactored for better maintainability',
      data: {
        files_affected: Array.from({ length: FactoryUtils.randomNumber(2, 8) }, () => 
          FactoryUtils.randomFilePath()
        ),
        duration_ms: FactoryUtils.randomNumber(30000, 600000)
      }
    }),

    // Build and test events
    build_completed: (event) => ({
      ...event,
      type: 'build_completed',
      title: 'Build Completed',
      description: 'Project build completed successfully',
      data: {
        status: 'success',
        build_target: FactoryUtils.randomChoice(['production', 'development', 'staging']),
        duration_ms: FactoryUtils.randomNumber(10000, 120000)
      }
    }),

    build_failed: (event) => ({
      ...event,
      type: 'build_failed',
      title: 'Build Failed',
      description: 'Project build failed with errors',
      data: {
        status: 'failed',
        error_message: FactoryUtils.randomChoice([
          'TypeScript compilation errors',
          'Missing dependencies',
          'Syntax errors detected',
          'Test failures blocking build'
        ]),
        build_target: FactoryUtils.randomChoice(['production', 'development', 'staging'])
      }
    }),

    test_suite_run: (event) => ({
      ...event,
      type: 'test_suite_run',
      title: 'Test Suite Executed',
      description: 'Test suite has been executed',
      data: {
        test_count: FactoryUtils.randomNumber(50, 500),
        tests_passed: FactoryUtils.randomNumber(45, 490),
        tests_failed: FactoryUtils.randomNumber(0, 10),
        coverage_percentage: FactoryUtils.randomFloat(70, 95, 1),
        duration_ms: FactoryUtils.randomNumber(5000, 300000)
      }
    }),

    // Performance and monitoring events
    performance_alert: (event) => ({
      ...event,
      type: 'performance_alert',
      title: 'Performance Alert',
      description: 'Performance threshold exceeded',
      data: {
        severity: FactoryUtils.randomChoice(['low', 'medium', 'high', 'critical'] as const),
        current_value: FactoryUtils.randomFloat(80, 150),
        threshold: FactoryUtils.randomFloat(50, 100),
        memory_usage_mb: FactoryUtils.randomFloat(100, 2048),
        cpu_usage_percent: FactoryUtils.randomFloat(80, 100)
      }
    }),

    system_health: (event) => ({
      ...event,
      type: 'system_health',
      title: 'System Health Check',
      description: 'System health monitoring report',
      data: {
        memory_usage_mb: FactoryUtils.randomFloat(50, 1024),
        cpu_usage_percent: FactoryUtils.randomFloat(5, 80),
        status: FactoryUtils.randomChoice(['healthy', 'warning', 'critical'])
      }
    }),

    // Git operation events
    git_commit: (event) => ({
      ...event,
      type: 'git_commit',
      title: 'Git Commit',
      description: 'Code changes committed to repository',
      data: {
        hash: FactoryUtils.randomString(7, 'abcdef0123456789'),
        message: FactoryUtils.randomChoice([
          'feat: add new feature',
          'fix: resolve bug',
          'refactor: improve code structure',
          'docs: update documentation',
          'test: add test coverage'
        ]),
        author: FactoryUtils.randomChoice(['claude-code', 'developer', 'automated-system']),
        files: Array.from({ length: FactoryUtils.randomNumber(1, 5) }, () => 
          FactoryUtils.randomFilePath()
        )
      }
    }),

    pull_request_created: (event) => ({
      ...event,
      type: 'pull_request_created',
      title: 'Pull Request Created',
      description: 'New pull request has been created',
      data: {
        branch_name: `feature/${FactoryUtils.randomString(8)}`,
        url: `https://github.com/example/repo/pull/${FactoryUtils.randomNumber(1, 1000)}`
      }
    }),

    // API and integration events
    api_call: (event) => ({
      ...event,
      type: 'api_call',
      title: 'API Call Made',
      description: 'External API call completed',
      data: {
        endpoint: `/api/v1/${FactoryUtils.randomChoice(['users', 'events', 'status', 'health'])}`,
        response_code: FactoryUtils.randomChoice([200, 201, 400, 404, 500]),
        response_time_ms: FactoryUtils.randomNumber(50, 5000)
      }
    }),

    webhook_received: (event) => ({
      ...event,
      type: 'webhook_received',
      title: 'Webhook Received',
      description: 'Incoming webhook processed',
      data: {
        endpoint: `/webhook/${FactoryUtils.randomChoice(['telegram', 'github', 'ci'])}`,
        response_code: 200
      }
    }),

    // User interaction events
    approval_request: (event) => ({
      ...event,
      type: 'approval_request',
      title: 'Approval Request',
      description: 'User approval required for action',
      data: {
        status: 'pending'
      }
    }),

    user_response: (event) => ({
      ...event,
      type: 'user_response',
      title: 'User Response Received',
      description: 'User has responded to request',
      data: {
        action: FactoryUtils.randomChoice(['approve', 'deny', 'defer'])
      }
    }),

    // Security events
    security_alert: (event) => ({
      ...event,
      type: 'security_alert',
      title: 'Security Alert',
      description: 'Security issue detected',
      data: {
        severity: FactoryUtils.randomChoice(['low', 'medium', 'high', 'critical'] as const),
        error_message: FactoryUtils.randomChoice([
          'Unauthorized access attempt',
          'Suspicious activity detected',
          'Potential vulnerability identified',
          'Security scan failed'
        ])
      }
    }),

    // File system events
    file_created: (event) => ({
      ...event,
      type: 'file_created',
      title: 'File Created',
      description: 'New file has been created',
      data: {
        files: [FactoryUtils.randomFilePath()]
      }
    }),

    file_modified: (event) => ({
      ...event,
      type: 'file_modified',
      title: 'File Modified',
      description: 'Existing file has been modified',
      data: {
        files: [FactoryUtils.randomFilePath()]
      }
    }),

    // Custom events for testing
    custom_event: (event) => ({
      ...event,
      type: 'custom_event',
      title: 'Custom Test Event',
      description: 'Custom event for testing purposes',
      data: {
        custom_field: FactoryUtils.randomString(20),
        test_id: Factory.sequence('eventId')
      }
    }),

    // Events with invalid data for error testing
    invalid_data: (event) => ({
      ...event,
      title: '', // Invalid: empty title
      description: 'x'.repeat(2001), // Invalid: too long
      data: {
        invalid_field: 'test'
      }
    }),

    // Events with missing required fields
    missing_required: (event) => {
      const { title, ...eventWithoutTitle } = event;
      return eventWithoutTitle as CCTelegramEvent;
    },

    // High-priority events
    high_priority: (event) => ({
      ...event,
      title: `[URGENT] ${event.title}`,
      data: {
        ...event.data,
        severity: 'critical' as const,
        priority: 'high'
      }
    }),

    // Low-priority events
    low_priority: (event) => ({
      ...event,
      title: `[INFO] ${event.title}`,
      data: {
        ...event.data,
        severity: 'low' as const,
        priority: 'low'
      }
    }),

    // Events from different sources
    from_mcp_server: (event) => ({
      ...event,
      source: 'mcp-server'
    }),

    from_bridge: (event) => ({
      ...event,
      source: 'bridge'
    }),

    from_external: (event) => ({
      ...event,
      source: 'external-system'
    })
  },

  sequences: {
    taskId: Sequences.taskId,
    eventId: Sequences.eventId,
    timestamp: Sequences.timestamp
  }
});

/**
 * Event batch factory for creating multiple related events
 */
Factory.define<CCTelegramEvent[]>('event_batch', () => {
  const baseEvent = Factory.build<CCTelegramEvent>('event');
  const count = FactoryUtils.randomNumber(3, 10);
  
  return Array.from({ length: count }, (_, index) => ({
    ...baseEvent,
    task_id: `${baseEvent.task_id}-${index + 1}`,
    title: `${baseEvent.title} ${index + 1}`,
    timestamp: new Date(Date.now() + index * 1000).toISOString()
  }));
});

/**
 * Event workflow factory for creating a sequence of related events
 */
Factory.define<CCTelegramEvent[]>('event_workflow', () => {
  const taskId = Factory.sequence('taskId');
  const baseTimestamp = Date.now();
  
  return [
    Factory.build<CCTelegramEvent>('event', {
      task_id: taskId,
      timestamp: new Date(baseTimestamp).toISOString()
    }, ['task_started']),
    
    Factory.build<CCTelegramEvent>('event', {
      task_id: taskId,
      timestamp: new Date(baseTimestamp + 60000).toISOString()
    }, ['code_generation']),
    
    Factory.build<CCTelegramEvent>('event', {
      task_id: taskId,
      timestamp: new Date(baseTimestamp + 120000).toISOString()
    }, ['test_suite_run']),
    
    Factory.build<CCTelegramEvent>('event', {
      task_id: taskId,
      timestamp: new Date(baseTimestamp + 180000).toISOString()
    }, ['task_completion'])
  ];
});

/**
 * Event timeline factory for creating events across different time periods
 */
Factory.define<CCTelegramEvent[]>('event_timeline', () => {
  const now = Date.now();
  const minute = 60 * 1000;
  const hour = 60 * minute;
  const day = 24 * hour;
  
  return [
    // Very recent event
    Factory.build<CCTelegramEvent>('event', {
      timestamp: new Date(now - 5 * minute).toISOString()
    }),
    
    // Recent event
    Factory.build<CCTelegramEvent>('event', {
      timestamp: new Date(now - 30 * minute).toISOString()
    }),
    
    // Old event
    Factory.build<CCTelegramEvent>('event', {
      timestamp: new Date(now - day).toISOString()
    }),
    
    // Very old event
    Factory.build<CCTelegramEvent>('event', {
      timestamp: new Date(now - 7 * day).toISOString()
    })
  ];
});