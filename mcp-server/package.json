{
  "name": "cctelegram-mcp-server",
  "version": "1.7.0",
  "description": "MCP server for CC Telegram Bridge integration",
  "main": "dist/index.js",
  "type": "module",
  "scripts": {
    "build": "tsc",
    "start": "node dist/index.js",
    "dev": "tsx src/index.ts",
    "docs:install": "cd docs && npm install",
    "docs:dev": "cd docs && npm run docs:dev",
    "docs:build": "cd docs && npm run docs:build",
    "docs:preview": "cd docs && npm run docs:preview",
    "docs:api": "cd docs && npm run api:generate",
    "docs:clean": "cd docs && npm run clean",
    "test": "jest",
    "test:unit": "jest --testPathPattern=unit",
    "test:integration": "jest --testPathPattern=integration",
    "test:performance": "jest --testPathPattern=performance --testTimeout=120000",
    "test:security": "jest --testPathPattern=security",
    "test:coverage": "jest --coverage",
    "test:coverage:nyc": "nyc --reporter=text --reporter=lcov --reporter=html jest",
    "test:coverage:ci": "nyc --reporter=lcov --reporter=json-summary --reporter=text-summary jest",
    "test:mutation": "stryker run",
    "test:mutation:ci": "stryker run --concurrency 2 --timeoutMS 60000",
    "test:mutation:report": "stryker run --reporters html,json,clear-text,progress",
    "coverage:check": "nyc check-coverage --lines 95 --functions 95 --branches 90 --statements 95",
    "coverage:report": "nyc report --reporter=text-lcov | head -20",
    "coverage:open": "open coverage/index.html",
    "coverage:analyze": "node scripts/coverage-analysis.js",
    "mutation:analyze": "node scripts/mutation-testing-analysis.js",
    "ci:quality-gates": "node scripts/ci-quality-gates.js",
    "quality:all": "npm run coverage:analyze && npm run mutation:analyze",
    "quality:ci": "npm run ci:quality-gates",
    "validate:coverage": "node scripts/validate-coverage-setup.js",
    "test:watch": "jest --watch",
    "test:ci": "jest --ci --coverage --watchAll=false --testResultsProcessor=jest-sonar-reporter",
    "test:observability": "tsx src/observability/test-integration.ts",
    "test:e2e": "playwright test",
    "test:e2e:headed": "playwright test --headed",
    "test:e2e:debug": "playwright test --debug",
    "test:e2e:ui": "playwright test --ui",
    "test:e2e:workflows": "playwright test --grep=\"Workflow\"",
    "test:e2e:mobile": "playwright test --grep=\"Mobile\"",
    "test:e2e:performance": "playwright test --grep=\"performance\"",
    "test:e2e:visual": "playwright test --grep=\"visual\"",
    "test:e2e:cross-browser": "playwright test --project=\"Chrome Desktop - Workflows\" --project=\"Firefox Desktop - Workflows\" --project=\"Safari Desktop - Workflows\"",
    "test:chaos": "jest --testPathPattern=chaos --testTimeout=300000",
    "test:chaos:network": "jest --testPathPattern=chaos.*network --testTimeout=180000",
    "test:chaos:service": "jest --testPathPattern=chaos.*service --testTimeout=240000",
    "test:chaos:recovery": "jest --testPathPattern=chaos.*recovery --testTimeout=360000",
    "test:chaos:all": "npm run test:chaos",
    "chaos:toxiproxy:start": "docker run -d --name toxiproxy -p 8474:8474 -p 26379-26389:26379-26389 ghcr.io/shopify/toxiproxy",
    "chaos:toxiproxy:stop": "docker stop toxiproxy && docker rm toxiproxy",
    "chaos:dashboard": "tsx tests/chaos/dashboard/chaos-dashboard.ts",
    "test:validate": "node scripts/validate-testing-infrastructure.js",
    "test:tier-integration": "node scripts/run-tier-integration-tests.js",
    "test:tier-integration:dev": "node scripts/run-tier-integration-tests.js --no-cleanup",
    "test:tier-cleanup": "node scripts/run-tier-integration-tests.js --cleanup-only",
    "test:tier-validate": "node scripts/validate-tier-tests.js",
    "observability:example": "tsx src/observability/example-integration.ts",
    "lint": "eslint \"src/**/*.{ts,tsx}\" --fix",
    "lint:check": "eslint \"src/**/*.{ts,tsx}\"",
    "format": "prettier --write \"src/**/*.{ts,tsx,js,jsx}\"",
    "format:check": "prettier --check \"src/**/*.{ts,tsx,js,jsx}\"",
    "type-check": "tsc --noEmit",
    "audit": "npm audit --audit-level=moderate",
    "audit:fix": "npm audit fix",
    "audit:ci": "npm ci --audit --audit-level=moderate --fund=false",
    "security:scan": "npm audit --audit-level=low --json",
    "security:full": "npm audit --audit-level=low --json > security-audit-full.json && npm run security:snyk",
    "security:snyk": "npx snyk test --json --severity-threshold=medium > snyk-security-report.json || true",
    "security:snyk-fix": "npx snyk fix",
    "security:integrity": "npm ci --audit --audit-level=moderate --package-lock-only",
    "security:license": "npx license-checker --json --out license-report.json",
    "clean": "rm -rf dist coverage node_modules/.cache",
    "prebuild": "npm run clean",
    "prepack": "npm run build && npm run test:ci",
    "docker:build": "docker build -t cctelegram-mcp-server .",
    "docker:run": "docker run -p 3000:3000 cctelegram-mcp-server",
    "docker:security": "docker build --target security -t cctelegram-mcp-security .",
    "benchmark": "tsx src/benchmark/benchmark-runner.ts",
    "benchmark:quick": "tsx src/benchmark/benchmark-runner.ts --output benchmark-results.json --quiet",
    "benchmark:full": "tsx src/benchmark/benchmark-runner.ts --output benchmark-results.json --format json --save-baseline",
    "benchmark:html": "tsx src/benchmark/benchmark-runner.ts --output benchmark-report.html --format html",
    "benchmark:csv": "tsx src/benchmark/benchmark-runner.ts --output benchmark-data.csv --format csv",
    "benchmark:md": "tsx src/benchmark/benchmark-runner.ts --output benchmark-report.md --format markdown",
    "benchmark:ci": "tsx src/benchmark/benchmark-runner.ts --baseline benchmark-baseline.json --threshold 10 --quiet --output benchmark-ci-results.json",
    "benchmark:regression": "tsx src/benchmark/benchmark-runner.ts --baseline benchmark-baseline.json --threshold 5 --output benchmark-regression.json",
    "test:benchmark": "jest --testPathPattern=benchmark --testTimeout=300000",
    "perf:k6": "k6 run tests/performance/k6/load-test.js",
    "perf:k6:load": "TARGET_VUS=50 BASE_URL=http://localhost:3000 k6 run tests/performance/k6/load-test.js",
    "perf:k6:stress": "TARGET_VUS=100 BASE_URL=http://localhost:3000 k6 run tests/performance/k6/stress-test.js",
    "perf:k6:spike": "BASELINE_VUS=10 SPIKE_VUS=200 BASE_URL=http://localhost:3000 k6 run tests/performance/k6/spike-test.js",
    "perf:k6:soak": "SOAK_VUS=30 SOAK_DURATION=10m BASE_URL=http://localhost:3000 k6 run tests/performance/k6/soak-test.js",
    "perf:autocannon": "tsx tests/performance/autocannon/autocannon-suite.ts",
    "perf:autocannon:webhook": "tsx tests/performance/autocannon/webhook-benchmark.ts",
    "perf:monitor": "tsx tests/performance/resource-monitor.ts",
    "perf:monitor:demo": "tsx -e \"import { ResourceMonitor } from './tests/performance/resource-monitor.js'; const monitor = new ResourceMonitor(); await monitor.startMonitoring(); setTimeout(() => monitor.stopMonitoring(), 30000);\"",
    "perf:baseline": "tsx -e \"import { BaselineManager, recordPerformanceBaseline } from './tests/performance/baseline-manager.js'; console.log('Baseline management tools ready');\"",
    "perf:baseline:record": "tsx -e \"import { runIntegratedPerformanceTests } from './tests/performance/integration-runner.js'; runIntegratedPerformanceTests({ testTypes: ['load'], baseline: { recordBaselines: true, compareToBaselines: false } });\"",
    "perf:regression": "tsx -e \"import { setupRegressionDetection, BaselineManager } from './tests/performance/regression-detector.js'; import { BaselineManager as BM } from './tests/performance/baseline-manager.js'; const bm = new BM(); await bm.initialize(); const rd = await setupRegressionDetection(bm); console.log('Regression detection ready');\"",
    "perf:regression:check": "tsx -e \"import { runIntegratedPerformanceTests } from './tests/performance/integration-runner.js'; runIntegratedPerformanceTests({ testTypes: ['load'], regression: { enableDetection: true } });\"",
    "perf:integrated": "tsx tests/performance/integration-runner.ts",
    "perf:integrated:full": "tsx -e \"import { runIntegratedPerformanceTests } from './tests/performance/integration-runner.js'; runIntegratedPerformanceTests({ testTypes: ['load', 'stress', 'autocannon', 'webhook'] });\"",
    "perf:integrated:baseline": "tsx -e \"import { runIntegratedPerformanceTests } from './tests/performance/integration-runner.js'; runIntegratedPerformanceTests({ testTypes: ['load', 'autocannon'], baseline: { recordBaselines: true, compareToBaselines: true } });\"",
    "perf:integrated:ci": "tsx -e \"import { runIntegratedPerformanceTests } from './tests/performance/integration-runner.js'; runIntegratedPerformanceTests({ testTypes: ['load'], regression: { enableDetection: true }, reporting: { generateReports: true } });\"",
    "perf:dashboard": "tsx tests/performance/dashboard-generator.ts",
    "perf:report": "tsx tests/performance/performance-reporter.ts",
    "perf:all": "npm run perf:integrated:full",
    "perf:quick": "npm run perf:integrated:ci",
    "test:contract": "jest --testPathPattern=contract --testTimeout=60000",
    "test:contract:consumer": "jest --testPathPattern=contract.*consumer --testTimeout=60000",
    "test:contract:provider": "jest --testPathPattern=contract.*provider --testTimeout=60000",
    "test:contract:publish": "npm run test:contract:consumer && npm run pact:publish",
    "test:contract:verify": "npm run test:contract:provider",
    "test:contract:ci": "npm run test:contract:publish && npm run test:contract:verify",
    "pact:publish": "pact-broker publish pacts --consumer-app-version=$(git rev-parse --short HEAD) --tag=$(git branch --show-current)",
    "pact:verify": "pact-broker verify --provider cctelegram-bridge --provider-app-version=$(git rev-parse --short HEAD)",
    "pact:can-deploy": "pact-broker can-i-deploy --pacticipant cctelegram-mcp-server --version=$(git rev-parse --short HEAD)",
    "pact:webhooks": "pact-broker create-webhook --provider cctelegram-bridge --consumer cctelegram-mcp-server",
    "validate": "npm run type-check && npm run lint:check && npm run format:check && npm run test:ci",
    "docs:version": "cd docs && npm run docs:version",
    "docs:deploy": "cd docs && npm run docs:deploy",
    "docs:quality": "cd docs && npm run quality:check",
    "docs:quality:ci": "cd docs && npm run quality:check:ci",
    "docs:metrics": "cd docs && npm run metrics:generate",
    "release": "semantic-release",
    "release:dry": "semantic-release --dry-run"
  },
  "keywords": [
    "mcp",
    "telegram",
    "claude-code",
    "bridge"
  ],
  "author": "Enrique",
  "license": "MIT",
  "dependencies": {
    "@modelcontextprotocol/sdk": "^1.17.1",
    "@opentelemetry/api": "^1.8.0",
    "@opentelemetry/exporter-jaeger": "^1.25.1",
    "@opentelemetry/exporter-prometheus": "^0.52.1",
    "@opentelemetry/instrumentation-fs": "^0.13.0",
    "@opentelemetry/instrumentation-http": "^0.52.1",
    "@opentelemetry/resources": "^1.25.1",
    "@opentelemetry/sdk-node": "^0.52.1",
    "@opentelemetry/semantic-conventions": "^1.25.1",
    "@types/express": "^5.0.3",
    "@types/joi": "^17.2.2",
    "axios": "^1.11.0",
    "crypto-js": "^4.2.0",
    "dotenv": "^16.4.7",
    "express": "^5.1.0",
    "fs-extra": "^11.2.0",
    "helmet": "^8.1.0",
    "joi": "^18.0.0",
    "path": "^0.12.7",
    "pino": "^9.7.0",
    "pino-pretty": "^13.1.1",
    "prom-client": "^15.1.2",
    "rate-limiter-flexible": "^7.2.0",
    "uuid": "^9.0.1",
    "winston": "^3.17.0",
    "ws": "^8.16.0"
  },
  "devDependencies": {
    "@playwright/test": "^1.42.1",
    "@testing-library/jest-dom": "^6.4.2",
    "@types/benchmark": "^2.1.5",
    "@types/bull": "^3.15.9",
    "@types/crypto-js": "^4.2.2",
    "@types/dockerode": "^3.3.23",
    "@types/fs-extra": "^11.0.4",
    "@types/helmet": "^0.0.48",
    "@types/ioredis": "^4.28.10",
    "@types/jest": "^30.0.0",
    "@types/node": "^20.0.0",
    "@types/opossum": "^8.1.9",
    "@types/p-retry": "^3.0.0",
    "@types/supertest": "^6.0.2",
    "@types/uuid": "^9.0.8",
    "@types/ws": "^8.5.10",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "autocannon": "^7.15.0",
    "benchmark": "^2.1.4",
    "clinic": "^13.0.0",
    "dockerode": "^4.0.2",
    "k6": "^0.0.0",
    "pidusage": "^3.0.2",
    "systeminformation": "^5.21.22",
    "toxiproxy-node": "^1.0.1",
    "@stryker-mutator/core": "^8.0.0",
    "@stryker-mutator/jest-runner": "^8.0.0",
    "@stryker-mutator/typescript-checker": "^8.0.0",
    "eslint": "^8.57.0",
    "jest": "^29.7.0",
    "jest-environment-node": "^29.7.0",
    "jest-sonar-reporter": "^2.0.0",
    "msw": "^2.2.1",
    "nyc": "^15.1.0",
    "pixelmatch": "^5.3.0",
    "playwright": "^1.42.1",
    "pngjs": "^7.0.0",
    "prettier": "^3.2.5",
    "supertest": "^6.3.4",
    "ts-jest": "^29.1.2",
    "ts-node": "^10.9.2",
    "tsx": "^4.7.0",
    "typescript": "^5.3.0",
    "@pact-foundation/pact": "^13.2.0",
    "@pact-foundation/pact-node": "^13.2.1",
    "@pact-foundation/pact-web": "^13.2.0",
    "pact-broker-cli": "^1.1.0",
    "semver": "^7.5.4",
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/commit-analyzer": "^11.1.0",
    "@semantic-release/exec": "^6.0.3",
    "@semantic-release/git": "^10.0.1",
    "@semantic-release/github": "^9.2.6",
    "@semantic-release/npm": "^11.0.2",
    "@semantic-release/release-notes-generator": "^12.1.0",
    "conventional-changelog-conventionalcommits": "^7.0.2",
    "semantic-release": "^22.0.12"
  },
  "overrides": {
    "d3-color": "^3.1.0",
    "form-data": "^4.0.0",
    "tough-cookie": "^4.1.3",
    "got": "^13.0.0"
  }
}
