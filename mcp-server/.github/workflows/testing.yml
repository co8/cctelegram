name: Testing Infrastructure

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Unit and Integration Tests
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Lint code
      run: npm run lint:check
      
    - name: Type check
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
        
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        CC_TELEGRAM_BRIDGE_ENABLED: false
        
    - name: Generate test coverage
      run: npm run test:coverage
      env:
        NODE_ENV: test
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true

  # Security Tests
  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security tests
      run: npm run test:security
      env:
        NODE_ENV: test
        
    - name: Security audit
      run: npm audit --audit-level=moderate
      
    - name: Security scan
      run: npm run security:scan

  # End-to-End Tests
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
      
    - name: Build application
      run: npm run build
      
    - name: Run E2E tests
      run: npx playwright test
      env:
        NODE_ENV: test
        CC_TELEGRAM_HEALTH_PORT: 8080
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: test-results/
        retention-days: 7

  # Performance Tests
  performance:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
        
    - name: Run memory leak tests
      run: npm test -- --testPathPattern=memory-leak
      env:
        NODE_ENV: test
        
    - name: Run load tests
      run: npm test -- --testPathPattern=load
      env:
        NODE_ENV: test

  # Test Quality Gates
  quality:
    runs-on: ubuntu-latest
    needs: [test, security, e2e, performance]
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Validate test coverage thresholds
      run: |
        echo "Validating test coverage meets quality gates..."
        npm run test:coverage -- --passWithNoTests
        
    - name: Check test infrastructure health
      run: |
        echo "Running test infrastructure validation..."
        node validate-task-15-integration.js
        
    - name: Validate CI/CD integration
      run: |
        echo "Testing infrastructure validation complete"
        echo "✅ Unit tests passed"
        echo "✅ Integration tests passed" 
        echo "✅ E2E tests passed"
        echo "✅ Security tests passed"
        echo "✅ Performance tests passed"
        echo "✅ Quality gates validated"

  # Test Results Summary
  summary:
    runs-on: ubuntu-latest
    needs: [test, security, e2e, performance, quality]
    if: always()
    timeout-minutes: 5
    
    steps:
    - name: Test Results Summary
      run: |
        echo "## 🧪 Test Infrastructure Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Unit & Integration | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Security | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| End-to-End | ${{ needs.e2e.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Performance | ${{ needs.performance.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Quality Gates | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Testing Infrastructure Status" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Framework**: Jest with TypeScript ESM support" >> $GITHUB_STEP_SUMMARY
        echo "- **E2E Testing**: Playwright cross-browser automation" >> $GITHUB_STEP_SUMMARY
        echo "- **Performance**: Memory leak detection and load testing" >> $GITHUB_STEP_SUMMARY
        echo "- **Security**: CVSS 9.1 vulnerability validation" >> $GITHUB_STEP_SUMMARY
        echo "- **Coverage**: Comprehensive test coverage reporting" >> $GITHUB_STEP_SUMMARY