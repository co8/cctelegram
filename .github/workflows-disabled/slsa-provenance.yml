name: SLSA Build Provenance

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
  
  # Allow manual triggering for testing
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: read

jobs:
  # Build the Rust bridge component
  build-bridge:
    name: Build Bridge with SLSA Provenance
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          components: clippy, rustfmt

      - name: Install cargo-auditable for build transparency
        run: cargo install cargo-auditable

      - name: Build Bridge (Auditable)
        run: |
          # Use cargo-auditable for transparent builds
          cargo auditable build --release
          
          # Create reproducible archive
          VERSION="${{ github.event.inputs.tag || github.ref_name }}"
          ARCHIVE_NAME="cctelegram-bridge-${VERSION}-linux-x86_64.tar.gz"
          
          # Package with deterministic timestamps
          tar --mtime='1980-01-01 00:00:00' \
              --sort=name \
              --owner=0 --group=0 --numeric-owner \
              -czf "${ARCHIVE_NAME}" \
              -C target/release \
              cctelegram-bridge
          
          echo "BRIDGE_ARCHIVE=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Generate build metadata
        run: |
          # Create comprehensive build metadata
          cat > build-metadata.json << EOF
          {
            "component": "cctelegram-bridge",
            "version": "${{ github.event.inputs.tag || github.ref_name }}",
            "commit": "${{ github.sha }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "builder": "GitHub Actions",
            "runner": "ubuntu-latest",
            "rust_version": "$(rustc --version)",
            "cargo_version": "$(cargo --version)",
            "dependencies": "$(cargo tree --format='{p} {f}')"
          }
          EOF

      - name: Generate checksums
        id: hash
        run: |
          # Generate multiple checksums for verification
          sha256sum "${BRIDGE_ARCHIVE}" > checksums.txt
          sha512sum "${BRIDGE_ARCHIVE}" >> checksums.txt
          b2sum "${BRIDGE_ARCHIVE}" >> checksums.txt
          
          # Create base64 encoded hashes for provenance
          echo "hashes=$(sha256sum ${BRIDGE_ARCHIVE} | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: bridge-build-${{ github.run_id }}
          path: |
            ${{ env.BRIDGE_ARCHIVE }}
            checksums.txt
            build-metadata.json
          retention-days: 90

  # Build the MCP Server component
  build-mcp-server:
    name: Build MCP Server with SLSA Provenance
    runs-on: ubuntu-latest
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json

      - name: Install dependencies
        working-directory: ./mcp-server
        run: |
          # Use npm ci for reproducible builds
          npm ci --audit --fund=false
          
          # Verify package-lock.json integrity
          npm audit signatures

      - name: Build MCP Server
        working-directory: ./mcp-server
        run: |
          # Build with production optimizations
          NODE_ENV=production npm run build
          
          # Create reproducible archive
          VERSION="${{ github.event.inputs.tag || github.ref_name }}"
          ARCHIVE_NAME="cctelegram-mcp-server-${VERSION}.tar.gz"
          
          # Package with deterministic timestamps
          tar --mtime='1980-01-01 00:00:00' \
              --sort=name \
              --owner=0 --group=0 --numeric-owner \
              --exclude='node_modules' \
              --exclude='tests' \
              --exclude='*.test.*' \
              -czf "../${ARCHIVE_NAME}" \
              dist/ package.json package-lock.json
          
          echo "MCP_ARCHIVE=${ARCHIVE_NAME}" >> $GITHUB_ENV

      - name: Generate build metadata
        working-directory: ./mcp-server
        run: |
          # Create comprehensive build metadata
          cat > ../mcp-build-metadata.json << EOF
          {
            "component": "cctelegram-mcp-server",
            "version": "${{ github.event.inputs.tag || github.ref_name }}",
            "commit": "${{ github.sha }}",
            "build_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "builder": "GitHub Actions",
            "runner": "ubuntu-latest",
            "node_version": "$(node --version)",
            "npm_version": "$(npm --version)",
            "dependencies": $(npm list --json --production | jq '.dependencies // {}')
          }
          EOF

      - name: Generate checksums
        id: hash
        run: |
          # Generate multiple checksums for verification
          sha256sum "${MCP_ARCHIVE}" > mcp-checksums.txt
          sha512sum "${MCP_ARCHIVE}" >> mcp-checksums.txt
          b2sum "${MCP_ARCHIVE}" >> mcp-checksums.txt
          
          # Create base64 encoded hashes for provenance
          echo "hashes=$(sha256sum ${MCP_ARCHIVE} | base64 -w0)" >> "$GITHUB_OUTPUT"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mcp-server-build-${{ github.run_id }}
          path: |
            ${{ env.MCP_ARCHIVE }}
            mcp-checksums.txt
            mcp-build-metadata.json
          retention-days: 90

  # Generate SLSA provenance using the official generator
  provenance-bridge:
    name: Generate Bridge Provenance
    needs: [build-bridge]
    permissions:
      actions: read   # To read the workflow path
      id-token: write # To sign the provenance
      contents: write # To upload assets
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build-bridge.outputs.hashes }}"
      upload-assets: true

  provenance-mcp-server:
    name: Generate MCP Server Provenance
    needs: [build-mcp-server]
    permissions:
      actions: read   # To read the workflow path
      id-token: write # To sign the provenance
      contents: write # To upload assets
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.build-mcp-server.outputs.hashes }}"
      upload-assets: true

  # Verify provenance generation
  verify-provenance:
    name: Verify SLSA Provenance
    runs-on: ubuntu-latest
    needs: [build-bridge, build-mcp-server, provenance-bridge, provenance-mcp-server]
    permissions:
      contents: read
      
    steps:
      - name: Install SLSA Verifier
        run: |
          # Install the official SLSA verifier
          curl -sSL https://github.com/slsa-framework/slsa-verifier/releases/latest/download/slsa-verifier-linux-amd64 \
            -o slsa-verifier
          chmod +x slsa-verifier
          sudo mv slsa-verifier /usr/local/bin/

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-build-${{ github.run_id }}"
          merge-multiple: true

      - name: Download provenance attestations
        uses: actions/download-artifact@v4
        with:
          pattern: "*-provenance"
          merge-multiple: true

      - name: Verify Bridge Provenance
        run: |
          # Find the bridge archive and provenance
          BRIDGE_ARCHIVE=$(ls cctelegram-bridge-*.tar.gz | head -1)
          BRIDGE_PROVENANCE=$(ls *-bridge-*.intoto.jsonl | head -1)
          
          echo "🔍 Verifying Bridge provenance..."
          echo "Archive: $BRIDGE_ARCHIVE"
          echo "Provenance: $BRIDGE_PROVENANCE"
          
          # Verify the provenance
          slsa-verifier verify-artifact \
            --provenance-path "$BRIDGE_PROVENANCE" \
            --source-uri "github.com/${{ github.repository }}" \
            --source-tag "${{ github.event.inputs.tag || github.ref_name }}" \
            "$BRIDGE_ARCHIVE"
          
          echo "✅ Bridge provenance verification successful"

      - name: Verify MCP Server Provenance
        run: |
          # Find the MCP server archive and provenance
          MCP_ARCHIVE=$(ls cctelegram-mcp-server-*.tar.gz | head -1)
          MCP_PROVENANCE=$(ls *-mcp-server-*.intoto.jsonl | head -1)
          
          echo "🔍 Verifying MCP Server provenance..."
          echo "Archive: $MCP_ARCHIVE"
          echo "Provenance: $MCP_PROVENANCE"
          
          # Verify the provenance
          slsa-verifier verify-artifact \
            --provenance-path "$MCP_PROVENANCE" \
            --source-uri "github.com/${{ github.repository }}" \
            --source-tag "${{ github.event.inputs.tag || github.ref_name }}" \
            "$MCP_ARCHIVE"
          
          echo "✅ MCP Server provenance verification successful"

      - name: Generate verification report
        run: |
          cat > provenance-verification-report.md << 'EOF'
          # 🔒 SLSA Provenance Verification Report
          
          ## Build Information
          - **Repository**: ${{ github.repository }}
          - **Tag**: ${{ github.event.inputs.tag || github.ref_name }}
          - **Commit**: ${{ github.sha }}
          - **Build Time**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          - **Runner**: GitHub Actions (ubuntu-latest)
          
          ## Verified Components
          
          ### CCTelegram Bridge
          - **Archive**: $(ls cctelegram-bridge-*.tar.gz | head -1)
          - **Provenance**: $(ls *-bridge-*.intoto.jsonl | head -1)
          - **Verification**: ✅ PASSED
          - **SLSA Level**: 3
          
          ### CCTelegram MCP Server
          - **Archive**: $(ls cctelegram-mcp-server-*.tar.gz | head -1)
          - **Provenance**: $(ls *-mcp-server-*.intoto.jsonl | head -1)
          - **Verification**: ✅ PASSED
          - **SLSA Level**: 3
          
          ## Verification Commands
          
          End users can verify these artifacts using:
          
          ```bash
          # Install SLSA verifier
          curl -sSL https://github.com/slsa-framework/slsa-verifier/releases/latest/download/slsa-verifier-linux-amd64 -o slsa-verifier
          chmod +x slsa-verifier
          
          # Verify bridge
          ./slsa-verifier verify-artifact \
            --provenance-path bridge-provenance.intoto.jsonl \
            --source-uri github.com/${{ github.repository }} \
            --source-tag ${{ github.event.inputs.tag || github.ref_name }} \
            cctelegram-bridge-*.tar.gz
          
          # Verify MCP server
          ./slsa-verifier verify-artifact \
            --provenance-path mcp-server-provenance.intoto.jsonl \
            --source-uri github.com/${{ github.repository }} \
            --source-tag ${{ github.event.inputs.tag || github.ref_name }} \
            cctelegram-mcp-server-*.tar.gz
          ```
          
          ## Security Attestation
          
          This build meets SLSA Build Level 3 requirements:
          - ✅ Scripted build process
          - ✅ Build service (GitHub Actions)
          - ✅ Ephemeral and isolated environment
          - ✅ Parameterless build
          - ✅ Hermetic build
          - ✅ Reproducible build
          - ✅ Build provenance generated and signed
          
          ---
          
          *Generated by SLSA Provenance Workflow on $(date -u)*
          EOF

      - name: Upload verification report
        uses: actions/upload-artifact@v4
        with:
          name: provenance-verification-report
          path: provenance-verification-report.md
          retention-days: 365  # Keep verification reports longer

  # Create release with provenance
  create-release:
    name: Create Verified Release
    runs-on: ubuntu-latest
    needs: [verify-provenance]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: CCTelegram ${{ github.ref_name }} (SLSA Verified)
          body: |
            # 🔒 SLSA Level 3 Verified Release
            
            This release includes cryptographically signed build provenance meeting SLSA Build Level 3 requirements.
            
            ## 📦 Release Artifacts
            
            All artifacts in this release have been built in isolated, ephemeral environments with full provenance tracking:
            
            - **Bridge Binary**: `cctelegram-bridge-${{ github.ref_name }}-linux-x86_64.tar.gz`
            - **MCP Server**: `cctelegram-mcp-server-${{ github.ref_name }}.tar.gz`
            - **Provenance Files**: `*.intoto.jsonl` (SLSA attestations)
            - **Checksums**: `*checksums.txt` (SHA256, SHA512, BLAKE2)
            
            ## 🔍 Verification
            
            Verify the integrity and provenance of these artifacts:
            
            ```bash
            # Install SLSA verifier
            curl -sSL https://github.com/slsa-framework/slsa-verifier/releases/latest/download/slsa-verifier-linux-amd64 -o slsa-verifier
            chmod +x slsa-verifier
            
            # Verify artifacts (replace with actual filenames)
            ./slsa-verifier verify-artifact --provenance-path [provenance-file] --source-uri github.com/${{ github.repository }} --source-tag ${{ github.ref_name }} [artifact-file]
            ```
            
            ## 🛡️ Security
            
            - **Build Environment**: Isolated GitHub Actions runners
            - **Supply Chain**: All dependencies locked and verified
            - **Signatures**: Cryptographically signed with GitHub's OIDC
            - **Provenance**: Full build transparency and reproducibility
            
            See the [Security Policy](SECURITY.md) for more information.
          draft: false
          prerelease: false

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./
          asset_name: release-assets
          asset_content_type: application/zip