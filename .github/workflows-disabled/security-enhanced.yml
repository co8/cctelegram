name: Enhanced Security Scanning

on:
  push:
    branches: [main, develop]
    paths:
      - 'mcp-server/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main, develop]
    paths:
      - 'mcp-server/**'
      - '.github/workflows/**'
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '20.x'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===== Comprehensive Security Analysis =====
  security-comprehensive:
    name: 🛡️ Comprehensive Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      pull-requests: write
    
    outputs:
      security-score: ${{ steps.security-summary.outputs.score }}
      critical-vulnerabilities: ${{ steps.vulnerability-assessment.outputs.critical-count }}
      high-vulnerabilities: ${{ steps.vulnerability-assessment.outputs.high-count }}
      security-passed: ${{ steps.security-gate.outputs.passed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json

      - name: Install dependencies
        working-directory: ./mcp-server
        run: npm ci

      # SAST Scanning with multiple tools
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript
          queries: security-extended,security-and-quality
          config-file: ./.github/codeql/codeql-config.yml

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:typescript"

      # Advanced SAST with Semgrep
      - name: Run Semgrep Security Analysis
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/typescript
            p/owasp-top-ten
            p/nodejs
            p/jwt
            p/crypto
            p/secrets
            r/typescript.lang.security
            r/javascript.lang.security.audit
          generateSarif: "1"
          auditOn: push
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # Dependency vulnerability scanning
      - name: Advanced Dependency Audit
        id: dependency-audit
        working-directory: ./mcp-server
        run: |
          echo "🔍 Running comprehensive dependency audit..."
          
          # Generate detailed audit report
          npm audit --audit-level=low --json > npm-audit-full.json || true
          
          # Extract vulnerability counts
          CRITICAL_COUNT=$(cat npm-audit-full.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH_COUNT=$(cat npm-audit-full.json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE_COUNT=$(cat npm-audit-full.json | jq '.metadata.vulnerabilities.moderate // 0')
          LOW_COUNT=$(cat npm-audit-full.json | jq '.metadata.vulnerabilities.low // 0')
          
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          echo "moderate-count=$MODERATE_COUNT" >> $GITHUB_OUTPUT
          echo "low-count=$LOW_COUNT" >> $GITHUB_OUTPUT
          
          echo "📊 Vulnerability Summary:"
          echo "Critical: $CRITICAL_COUNT"
          echo "High: $HIGH_COUNT"
          echo "Moderate: $MODERATE_COUNT"
          echo "Low: $LOW_COUNT"
          
          # Create detailed vulnerability report
          cat > vulnerability-report.md << EOF
          # Vulnerability Assessment Report
          
          ## Summary
          - **Critical Vulnerabilities**: $CRITICAL_COUNT
          - **High Vulnerabilities**: $HIGH_COUNT
          - **Moderate Vulnerabilities**: $MODERATE_COUNT
          - **Low Vulnerabilities**: $LOW_COUNT
          
          ## Analysis Date
          $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Action Required
          $(if [ "$CRITICAL_COUNT" -gt 0 ]; then echo "🚨 **CRITICAL**: Immediate action required"; elif [ "$HIGH_COUNT" -gt 0 ]; then echo "⚠️ **HIGH**: Review and remediate soon"; else echo "✅ **ACCEPTABLE**: No critical or high vulnerabilities"; fi)
          EOF

      # License compliance scanning
      - name: License Compliance Check
        working-directory: ./mcp-server
        run: |
          echo "📄 Checking license compliance..."
          
          # Install license checker
          npm install -g license-checker
          
          # Generate license report
          license-checker --json --out license-report.json || true
          
          # Check for problematic licenses
          PROBLEMATIC_LICENSES=("GPL" "AGPL" "LGPL" "CPAL" "OSL")
          
          echo "🔍 Scanning for problematic licenses..."
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" license-report.json; then
              echo "⚠️ Found potentially problematic license: $license"
            fi
          done

      # Container security scanning
      - name: Build Docker image for security scanning
        working-directory: ./mcp-server
        run: |
          # Create optimized Dockerfile for scanning
          cat > Dockerfile.security << 'EOF'
          FROM node:20-alpine AS base
          RUN apk add --no-cache dumb-init
          
          FROM base AS dependencies
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production && npm cache clean --force
          
          FROM base AS runtime
          ENV NODE_ENV=production
          WORKDIR /app
          COPY --from=dependencies /app/node_modules ./node_modules
          COPY dist/ ./dist/
          COPY package*.json ./
          
          RUN addgroup -g 1001 -S nodejs && \
              adduser -S mcp -u 1001 -G nodejs && \
              chown -R mcp:nodejs /app
          
          USER mcp
          EXPOSE 3000
          
          HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
            CMD node -e "process.exit(0)" || exit 1
          
          ENTRYPOINT ["dumb-init", "--"]
          CMD ["node", "dist/index.js"]
          EOF
          
          # Build image
          docker build -f Dockerfile.security -t cctelegram-mcp-security:latest .

      - name: Container Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cctelegram-mcp-security:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Secrets scanning
      - name: TruffleHog Secrets Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks Secrets Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

      # Security configuration analysis
      - name: Security Configuration Analysis
        working-directory: ./mcp-server
        run: |
          echo "🔧 Analyzing security configuration..."
          
          # Check for security best practices
          SECURITY_SCORE=100
          
          # Check if security features are enabled by default
          if ! grep -q "enableAuth.*true" src/security.ts; then
            echo "⚠️ Authentication not enabled by default"
            SECURITY_SCORE=$((SECURITY_SCORE - 10))
          fi
          
          if ! grep -q "enableRateLimit.*true" src/security.ts; then
            echo "⚠️ Rate limiting not enabled by default"
            SECURITY_SCORE=$((SECURITY_SCORE - 10))
          fi
          
          if ! grep -q "enableInputValidation.*true" src/security.ts; then
            echo "⚠️ Input validation not enabled by default"
            SECURITY_SCORE=$((SECURITY_SCORE - 15))
          fi
          
          # Check for hardcoded secrets (basic check)
          if grep -r -i "password\|secret\|key" src/ --include="*.ts" --exclude="security.ts" | grep -v "process.env" | head -5; then
            echo "⚠️ Potential hardcoded secrets found"
            SECURITY_SCORE=$((SECURITY_SCORE - 25))
          fi
          
          echo "security-score=$SECURITY_SCORE" >> $GITHUB_OUTPUT
          echo "🎯 Security Configuration Score: $SECURITY_SCORE/100"

      # Comprehensive vulnerability assessment
      - name: Vulnerability Assessment Summary
        id: vulnerability-assessment
        run: |
          CRITICAL_COUNT="${{ steps.dependency-audit.outputs.critical-count }}"
          HIGH_COUNT="${{ steps.dependency-audit.outputs.high-count }}"
          
          echo "critical-count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          echo "high-count=$HIGH_COUNT" >> $GITHUB_OUTPUT
          
          # Calculate risk score
          RISK_SCORE=$((CRITICAL_COUNT * 10 + HIGH_COUNT * 5))
          echo "risk-score=$RISK_SCORE" >> $GITHUB_OUTPUT
          
          echo "📊 Risk Assessment:"
          echo "- Critical Vulnerabilities: $CRITICAL_COUNT"
          echo "- High Vulnerabilities: $HIGH_COUNT"
          echo "- Risk Score: $RISK_SCORE"

      # Generate security summary
      - name: Security Summary
        id: security-summary
        run: |
          CRITICAL_VULNS="${{ steps.vulnerability-assessment.outputs.critical-count }}"
          HIGH_VULNS="${{ steps.vulnerability-assessment.outputs.high-count }}"
          SECURITY_SCORE="${{ steps.security-configuration.outputs.security-score }}"
          
          # Calculate overall security score
          VULN_PENALTY=$((CRITICAL_VULNS * 20 + HIGH_VULNS * 10))
          OVERALL_SCORE=$((SECURITY_SCORE - VULN_PENALTY))
          
          if [ $OVERALL_SCORE -lt 0 ]; then
            OVERALL_SCORE=0
          fi
          
          echo "score=$OVERALL_SCORE" >> $GITHUB_OUTPUT
          
          # Generate security badge
          if [ $OVERALL_SCORE -ge 90 ]; then
            BADGE_COLOR="brightgreen"
            SECURITY_LEVEL="Excellent"
          elif [ $OVERALL_SCORE -ge 80 ]; then
            BADGE_COLOR="green"
            SECURITY_LEVEL="Good"
          elif [ $OVERALL_SCORE -ge 70 ]; then
            BADGE_COLOR="yellow"
            SECURITY_LEVEL="Fair"
          elif [ $OVERALL_SCORE -ge 60 ]; then
            BADGE_COLOR="orange"
            SECURITY_LEVEL="Poor"
          else
            BADGE_COLOR="red"
            SECURITY_LEVEL="Critical"
          fi
          
          echo "🛡️ Overall Security Score: $OVERALL_SCORE/100 ($SECURITY_LEVEL)"

      # Security gate check
      - name: Security Gate Validation
        id: security-gate
        run: |
          CRITICAL_VULNS="${{ steps.vulnerability-assessment.outputs.critical-count }}"
          HIGH_VULNS="${{ steps.vulnerability-assessment.outputs.high-count }}"
          SECURITY_SCORE="${{ steps.security-summary.outputs.score }}"
          
          echo "🚪 Security Gate Validation:"
          echo "- Critical Vulnerabilities: $CRITICAL_VULNS (Max: 0)"
          echo "- High Vulnerabilities: $HIGH_VULNS (Max: 2)"
          echo "- Security Score: $SECURITY_SCORE (Min: 70)"
          
          # Security gate rules
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ FAILED: Critical vulnerabilities found ($CRITICAL_VULNS)"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$HIGH_VULNS" -gt 2 ]; then
            echo "❌ FAILED: Too many high vulnerabilities ($HIGH_VULNS > 2)"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$SECURITY_SCORE" -lt 70 ]; then
            echo "❌ FAILED: Security score too low ($SECURITY_SCORE < 70)"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ PASSED: All security gates met"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      # Upload all security artifacts
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports-${{ github.run_id }}
          path: |
            mcp-server/npm-audit-full.json
            mcp-server/vulnerability-report.md
            mcp-server/license-report.json
            trivy-results.sarif
            semgrep.sarif
          retention-days: 90

      # Comment on PR with security results
      - name: Comment Security Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const criticalCount = '${{ steps.vulnerability-assessment.outputs.critical-count }}';
            const highCount = '${{ steps.vulnerability-assessment.outputs.high-count }}';
            const securityScore = '${{ steps.security-summary.outputs.score }}';
            const gatePassed = '${{ steps.security-gate.outputs.passed }}';
            
            const gateStatus = gatePassed === 'true' ? '✅ PASSED' : '❌ FAILED';
            const gateEmoji = gatePassed === 'true' ? '🛡️' : '🚨';
            
            const comment = `
            ## ${gateEmoji} Security Analysis Results
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | 🔴 Critical Vulnerabilities | ${criticalCount} | ${criticalCount === '0' ? '✅' : '❌'} |
            | 🟡 High Vulnerabilities | ${highCount} | ${parseInt(highCount) <= 2 ? '✅' : '❌'} |
            | 🛡️ Security Score | ${securityScore}/100 | ${parseInt(securityScore) >= 70 ? '✅' : '❌'} |
            | 🚪 **Security Gate** | **${gateStatus}** | |
            
            ${gatePassed === 'false' ? '⚠️ **Security gate failed!** Please review and address the security issues before merging.' : '🎉 All security checks passed!'}
            
            <details>
            <summary>📋 Security Scan Summary</summary>
            
            - **SAST**: CodeQL + Semgrep analysis completed
            - **Dependencies**: npm audit + license compliance check
            - **Containers**: Trivy vulnerability scan
            - **Secrets**: TruffleHog + GitLeaks scan
            - **Configuration**: Security best practices validation
            
            </details>
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ===== DAST (Dynamic Application Security Testing) =====
  dast-security:
    name: 🌐 Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: [security-comprehensive]
    if: needs.security-comprehensive.outputs.security-passed == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json

      - name: Install and build
        working-directory: ./mcp-server
        run: |
          npm ci
          npm run build

      - name: Start MCP Server for DAST
        working-directory: ./mcp-server
        run: |
          # Start server in background for testing
          npm start &
          SERVER_PID=$!
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          
          # Wait for server to be ready
          sleep 10
          
          # Basic health check
          if curl -f http://localhost:3000/health 2>/dev/null; then
            echo "✅ Server is running"
          else
            echo "❌ Server failed to start"
            exit 1
          fi

      - name: OWASP ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60'

      - name: Stop server
        if: always()
        run: |
          if [ ! -z "$SERVER_PID" ]; then
            kill $SERVER_PID || true
          fi

      - name: Upload DAST results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dast-results-${{ github.run_id }}
          path: |
            report_html.html
            report_json.json
            report_md.md
          retention-days: 30