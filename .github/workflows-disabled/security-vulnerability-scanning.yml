name: Automated Vulnerability Scanning and CI/CD Integration

on:
  push:
    branches: [main, develop]
    paths:
      - 'mcp-server/**'
      - '.github/workflows/**'
      - 'package*.json'
      - 'Cargo.toml'
      - 'Cargo.lock'
  pull_request:
    branches: [main, develop]
    paths:
      - 'mcp-server/**'
      - '.github/workflows/**'
      - 'package*.json'
      - 'Cargo.toml'
      - 'Cargo.lock'
  schedule:
    # Run comprehensive security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - comprehensive
          - quick
          - snyk-only
          - dependencies-only

env:
  NODE_VERSION: '20.x'
  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
  # Security thresholds
  MAX_CRITICAL_VULNERABILITIES: 0
  MAX_HIGH_VULNERABILITIES: 2
  MIN_SECURITY_SCORE: 80
  
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===== Snyk Vulnerability Scanning =====
  snyk-security-scan:
    name: 🔍 Snyk Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read
      pull-requests: write
    
    outputs:
      snyk-critical-count: ${{ steps.snyk-summary.outputs.critical-count }}
      snyk-high-count: ${{ steps.snyk-summary.outputs.high-count }}
      snyk-passed: ${{ steps.snyk-gate.outputs.passed }}
      snyk-report-path: ${{ steps.snyk-scan.outputs.report-path }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json

      - name: Install dependencies with audit
        working-directory: ./mcp-server
        run: |
          echo "🔒 Installing dependencies with package integrity validation..."
          
          # Use npm ci with audit for package integrity validation
          npm ci --audit --audit-level=moderate --fund=false
          
          # Verify package-lock integrity
          if ! npm ci --package-lock-only --audit; then
            echo "❌ Package lock integrity check failed"
            exit 1
          fi
          
          echo "✅ Package integrity validation completed"

      - name: Install Snyk CLI
        run: |
          echo "📦 Installing Snyk CLI..."
          npm install -g snyk
          snyk --version

      - name: Authenticate Snyk
        run: |
          if [ -z "${{ env.SNYK_TOKEN }}" ]; then
            echo "⚠️ SNYK_TOKEN not set - using public database only"
            echo "snyk-authenticated=false" >> $GITHUB_ENV
          else
            echo "🔐 Authenticating with Snyk..."
            snyk auth ${{ env.SNYK_TOKEN }}
            echo "snyk-authenticated=true" >> $GITHUB_ENV
          fi

      - name: Snyk Code Analysis (SAST)
        id: snyk-code
        working-directory: ./mcp-server
        continue-on-error: true
        run: |
          echo "🔍 Running Snyk Code Analysis (SAST)..."
          
          # Run Snyk Code scan
          snyk code test \
            --json \
            --severity-threshold=medium \
            --report-json=snyk-code-report.json || true
          
          # Extract results
          if [ -f "snyk-code-report.json" ]; then
            CODE_CRITICAL=$(jq '[.runs[0].results[] | select(.level == "error")] | length' snyk-code-report.json 2>/dev/null || echo "0")
            CODE_HIGH=$(jq '[.runs[0].results[] | select(.level == "warning")] | length' snyk-code-report.json 2>/dev/null || echo "0")
            
            echo "code-critical-count=$CODE_CRITICAL" >> $GITHUB_OUTPUT
            echo "code-high-count=$CODE_HIGH" >> $GITHUB_OUTPUT
            
            echo "📊 Snyk Code Results:"
            echo "Critical: $CODE_CRITICAL"
            echo "High: $CODE_HIGH"
          else
            echo "code-critical-count=0" >> $GITHUB_OUTPUT
            echo "code-high-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Snyk Open Source Scan
        id: snyk-oss
        working-directory: ./mcp-server
        continue-on-error: true
        run: |
          echo "🔍 Running Snyk Open Source Scan..."
          
          # Run Snyk test for dependencies
          snyk test \
            --json \
            --severity-threshold=low \
            --report-json=snyk-oss-report.json || true
          
          # Extract vulnerability counts
          if [ -f "snyk-oss-report.json" ]; then
            OSS_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-oss-report.json 2>/dev/null || echo "0")
            OSS_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-oss-report.json 2>/dev/null || echo "0")
            OSS_MEDIUM=$(jq '[.vulnerabilities[] | select(.severity == "medium")] | length' snyk-oss-report.json 2>/dev/null || echo "0")
            
            echo "oss-critical-count=$OSS_CRITICAL" >> $GITHUB_OUTPUT
            echo "oss-high-count=$OSS_HIGH" >> $GITHUB_OUTPUT
            echo "oss-medium-count=$OSS_MEDIUM" >> $GITHUB_OUTPUT
            
            echo "📊 Snyk OSS Results:"
            echo "Critical: $OSS_CRITICAL"
            echo "High: $OSS_HIGH"
            echo "Medium: $OSS_MEDIUM"
          else
            echo "oss-critical-count=0" >> $GITHUB_OUTPUT
            echo "oss-high-count=0" >> $GITHUB_OUTPUT
            echo "oss-medium-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Snyk Container Scan
        id: snyk-container
        working-directory: ./mcp-server
        continue-on-error: true
        run: |
          echo "🔍 Running Snyk Container Scan..."
          
          # Build Docker image for scanning
          docker build -t cctelegram-snyk-scan:latest .
          
          # Run Snyk container scan
          snyk container test cctelegram-snyk-scan:latest \
            --json \
            --severity-threshold=medium \
            --report-json=snyk-container-report.json || true
          
          # Extract results
          if [ -f "snyk-container-report.json" ]; then
            CONTAINER_CRITICAL=$(jq '[.vulnerabilities[] | select(.severity == "critical")] | length' snyk-container-report.json 2>/dev/null || echo "0")
            CONTAINER_HIGH=$(jq '[.vulnerabilities[] | select(.severity == "high")] | length' snyk-container-report.json 2>/dev/null || echo "0")
            
            echo "container-critical-count=$CONTAINER_CRITICAL" >> $GITHUB_OUTPUT
            echo "container-high-count=$CONTAINER_HIGH" >> $GITHUB_OUTPUT
            
            echo "📊 Snyk Container Results:"
            echo "Critical: $CONTAINER_CRITICAL"
            echo "High: $CONTAINER_HIGH"
          else
            echo "container-critical-count=0" >> $GITHUB_OUTPUT
            echo "container-high-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Snyk Infrastructure as Code Scan
        id: snyk-iac
        continue-on-error: true
        run: |
          echo "🔍 Running Snyk Infrastructure as Code Scan..."
          
          # Scan for IaC misconfigurations
          snyk iac test \
            --json \
            --severity-threshold=medium \
            --report-json=snyk-iac-report.json \
            .github/workflows/ \
            docker-compose.yml \
            mcp-server/Dockerfile || true
          
          # Extract results
          if [ -f "snyk-iac-report.json" ]; then
            IAC_CRITICAL=$(jq '[.infrastructureAsCodeIssues[] | select(.severity == "critical")] | length' snyk-iac-report.json 2>/dev/null || echo "0")
            IAC_HIGH=$(jq '[.infrastructureAsCodeIssues[] | select(.severity == "high")] | length' snyk-iac-report.json 2>/dev/null || echo "0")
            
            echo "iac-critical-count=$IAC_CRITICAL" >> $GITHUB_OUTPUT
            echo "iac-high-count=$IAC_HIGH" >> $GITHUB_OUTPUT
            
            echo "📊 Snyk IaC Results:"
            echo "Critical: $IAC_CRITICAL"
            echo "High: $IAC_HIGH"
          else
            echo "iac-critical-count=0" >> $GITHUB_OUTPUT
            echo "iac-high-count=0" >> $GITHUB_OUTPUT
          fi

      - name: Generate Snyk Summary Report
        id: snyk-summary
        working-directory: ./mcp-server
        run: |
          # Aggregate all Snyk results
          CODE_CRITICAL="${{ steps.snyk-code.outputs.code-critical-count }}"
          CODE_HIGH="${{ steps.snyk-code.outputs.code-high-count }}"
          OSS_CRITICAL="${{ steps.snyk-oss.outputs.oss-critical-count }}"
          OSS_HIGH="${{ steps.snyk-oss.outputs.oss-high-count }}"
          OSS_MEDIUM="${{ steps.snyk-oss.outputs.oss-medium-count }}"
          CONTAINER_CRITICAL="${{ steps.snyk-container.outputs.container-critical-count }}"
          CONTAINER_HIGH="${{ steps.snyk-container.outputs.container-high-count }}"
          IAC_CRITICAL="${{ steps.snyk-iac.outputs.iac-critical-count }}"
          IAC_HIGH="${{ steps.snyk-iac.outputs.iac-high-count }}"
          
          # Calculate totals
          TOTAL_CRITICAL=$((CODE_CRITICAL + OSS_CRITICAL + CONTAINER_CRITICAL + IAC_CRITICAL))
          TOTAL_HIGH=$((CODE_HIGH + OSS_HIGH + CONTAINER_HIGH + IAC_HIGH))
          
          echo "critical-count=$TOTAL_CRITICAL" >> $GITHUB_OUTPUT
          echo "high-count=$TOTAL_HIGH" >> $GITHUB_OUTPUT
          echo "medium-count=$OSS_MEDIUM" >> $GITHUB_OUTPUT
          
          # Generate comprehensive report
          cat > snyk-comprehensive-report.md << EOF
          # Snyk Security Scan Report
          
          ## Executive Summary
          - **Total Critical Vulnerabilities**: $TOTAL_CRITICAL
          - **Total High Vulnerabilities**: $TOTAL_HIGH
          - **Total Medium Vulnerabilities**: $OSS_MEDIUM
          - **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Breakdown by Scan Type
          
          ### Code Analysis (SAST)
          - Critical: $CODE_CRITICAL
          - High: $CODE_HIGH
          
          ### Open Source Dependencies
          - Critical: $OSS_CRITICAL
          - High: $OSS_HIGH
          - Medium: $OSS_MEDIUM
          
          ### Container Security
          - Critical: $CONTAINER_CRITICAL
          - High: $CONTAINER_HIGH
          
          ### Infrastructure as Code
          - Critical: $IAC_CRITICAL
          - High: $IAC_HIGH
          
          ## Risk Assessment
          $(if [ "$TOTAL_CRITICAL" -gt 0 ]; then echo "🚨 **CRITICAL RISK**: Immediate action required"; elif [ "$TOTAL_HIGH" -gt 2 ]; then echo "⚠️ **HIGH RISK**: Review and remediate soon"; else echo "✅ **ACCEPTABLE RISK**: Continue monitoring"; fi)
          
          ## Recommendations
          - Review all critical and high severity vulnerabilities
          - Apply security patches for affected packages
          - Consider using Snyk fix for automated remediation
          - Implement security policies to prevent future issues
          EOF
          
          echo "📊 Snyk Comprehensive Summary:"
          echo "Total Critical: $TOTAL_CRITICAL"
          echo "Total High: $TOTAL_HIGH"
          echo "Total Medium: $OSS_MEDIUM"

      - name: Snyk Security Gate
        id: snyk-gate
        run: |
          CRITICAL_COUNT="${{ steps.snyk-summary.outputs.critical-count }}"
          HIGH_COUNT="${{ steps.snyk-summary.outputs.high-count }}"
          
          echo "🚪 Snyk Security Gate Validation:"
          echo "- Critical Vulnerabilities: $CRITICAL_COUNT (Max: ${{ env.MAX_CRITICAL_VULNERABILITIES }})"
          echo "- High Vulnerabilities: $HIGH_COUNT (Max: ${{ env.MAX_HIGH_VULNERABILITIES }})"
          
          if [ "$CRITICAL_COUNT" -gt "${{ env.MAX_CRITICAL_VULNERABILITIES }}" ]; then
            echo "❌ FAILED: Critical vulnerabilities exceed threshold ($CRITICAL_COUNT > ${{ env.MAX_CRITICAL_VULNERABILITIES }})"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ "$HIGH_COUNT" -gt "${{ env.MAX_HIGH_VULNERABILITIES }}" ]; then
            echo "❌ FAILED: High vulnerabilities exceed threshold ($HIGH_COUNT > ${{ env.MAX_HIGH_VULNERABILITIES }})"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ PASSED: All Snyk security gates met"
            echo "passed=true" >> $GITHUB_OUTPUT
          fi

      - name: Upload Snyk Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snyk-security-reports-${{ github.run_id }}
          path: |
            mcp-server/snyk-*.json
            mcp-server/snyk-comprehensive-report.md
            snyk-iac-report.json
          retention-days: 90

  # ===== Package Integrity and License Compliance =====
  package-integrity-scan:
    name: 📦 Package Integrity & License Compliance
    runs-on: ubuntu-latest
    
    outputs:
      integrity-passed: ${{ steps.integrity-gate.outputs.passed }}
      license-passed: ${{ steps.license-gate.outputs.passed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: mcp-server/package-lock.json

      - name: Package Integrity Validation
        id: integrity-check
        working-directory: ./mcp-server
        run: |
          echo "🔒 Validating package integrity..."
          
          # Verify package-lock.json integrity
          if ! npm ci --audit --audit-level=moderate --fund=false; then
            echo "❌ Package integrity check failed"
            echo "integrity-status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check for package inconsistencies
          if ! npm ls --audit --audit-level=moderate >/dev/null 2>&1; then
            echo "⚠️ Package dependency inconsistencies detected"
            npm ls --audit --audit-level=moderate || true
          fi
          
          # Verify checksums of critical packages
          echo "🔍 Verifying critical package checksums..."
          npm shrinkwrap --audit --audit-level=moderate >/dev/null 2>&1 || true
          
          echo "✅ Package integrity validation completed"
          echo "integrity-status=passed" >> $GITHUB_OUTPUT

      - name: Advanced License Compliance Scan
        id: license-scan
        working-directory: ./mcp-server
        run: |
          echo "📄 Advanced license compliance scanning..."
          
          # Install license checker with more features
          npm install -g license-checker license-compatibility-checker
          
          # Generate detailed license report
          license-checker --json --out license-detailed-report.json || true
          license-checker --csv --out license-report.csv || true
          
          # Define problematic licenses
          PROBLEMATIC_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "LGPL-2.0" "LGPL-2.1" "LGPL-3.0" "CPAL-1.0" "OSL-3.0" "EPL-1.0" "CPL-1.0")
          COMPLIANCE_ISSUES=0
          
          echo "🔍 Scanning for license compliance issues..."
          
          # Check for problematic licenses
          for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" license-detailed-report.json 2>/dev/null; then
              echo "⚠️ Found potentially problematic license: $license"
              COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + 1))
              grep "$license" license-detailed-report.json | head -3
            fi
          done
          
          # Check for missing licenses
          MISSING_LICENSES=$(cat license-detailed-report.json | jq '[.[] | select(.licenses == "UNKNOWN" or .licenses == "")] | length' 2>/dev/null || echo "0")
          
          if [ "$MISSING_LICENSES" -gt 0 ]; then
            echo "⚠️ Found $MISSING_LICENSES packages with missing license information"
            COMPLIANCE_ISSUES=$((COMPLIANCE_ISSUES + MISSING_LICENSES))
          fi
          
          echo "license-issues=$COMPLIANCE_ISSUES" >> $GITHUB_OUTPUT
          echo "missing-licenses=$MISSING_LICENSES" >> $GITHUB_OUTPUT
          
          # Generate license compliance report
          cat > license-compliance-report.md << EOF
          # License Compliance Report
          
          ## Summary
          - **License Compliance Issues**: $COMPLIANCE_ISSUES
          - **Missing License Information**: $MISSING_LICENSES
          - **Scan Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Problematic Licenses Found
          $(for license in "${PROBLEMATIC_LICENSES[@]}"; do
            if grep -q "$license" license-detailed-report.json 2>/dev/null; then
              echo "- $license"
            fi
          done)
          
          ## Compliance Status
          $(if [ "$COMPLIANCE_ISSUES" -eq 0 ]; then echo "✅ **COMPLIANT**: No license issues detected"; else echo "⚠️ **ISSUES FOUND**: $COMPLIANCE_ISSUES license compliance issues require review"; fi)
          
          ## Recommendations
          - Review all flagged licenses for compatibility with project requirements
          - Consider replacing packages with problematic licenses
          - Ensure all dependencies have clear license information
          - Implement license scanning in CI/CD pipeline
          EOF
          
          echo "📊 License Compliance Summary:"
          echo "Issues Found: $COMPLIANCE_ISSUES"
          echo "Missing Licenses: $MISSING_LICENSES"

      - name: Integrity Gate Check
        id: integrity-gate
        run: |
          INTEGRITY_STATUS="${{ steps.integrity-check.outputs.integrity-status }}"
          
          if [ "$INTEGRITY_STATUS" = "passed" ]; then
            echo "✅ Package integrity gate PASSED"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Package integrity gate FAILED"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: License Gate Check
        id: license-gate
        run: |
          LICENSE_ISSUES="${{ steps.license-scan.outputs.license-issues }}"
          
          # Allow up to 2 minor license issues (like missing info on dev dependencies)
          if [ "$LICENSE_ISSUES" -le 2 ]; then
            echo "✅ License compliance gate PASSED (Issues: $LICENSE_ISSUES ≤ 2)"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ License compliance gate FAILED (Issues: $LICENSE_ISSUES > 2)"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload Package Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: package-integrity-reports-${{ github.run_id }}
          path: |
            mcp-server/license-*.json
            mcp-server/license-*.csv
            mcp-server/license-compliance-report.md
          retention-days: 30

  # ===== Subresource Integrity Check =====
  subresource-integrity-check:
    name: 🔗 Subresource Integrity Validation
    runs-on: ubuntu-latest
    
    outputs:
      sri-passed: ${{ steps.sri-gate.outputs.passed }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install SRI Tools
        run: |
          npm install -g sri-toolbox
          npm install -g @html-validate/cli html-validate

      - name: Scan for CDN Resources
        id: cdn-scan
        run: |
          echo "🔍 Scanning for CDN resources and external dependencies..."
          
          # Find HTML files that might contain CDN links
          HTML_FILES=$(find . -name "*.html" -type f 2>/dev/null || echo "")
          JS_FILES=$(find . -name "*.js" -type f -not -path "./node_modules/*" 2>/dev/null || echo "")
          TS_FILES=$(find . -name "*.ts" -type f -not -path "./node_modules/*" 2>/dev/null || echo "")
          
          CDN_RESOURCES=0
          MISSING_SRI=0
          
          # Check for common CDN patterns
          CDN_PATTERNS=(
            "cdn.jsdelivr.net"
            "unpkg.com"
            "cdnjs.cloudflare.com"
            "ajax.googleapis.com"
            "maxcdn.bootstrapcdn.com"
            "stackpath.bootstrapcdn.com"
            "use.fontawesome.com"
          )
          
          echo "📄 Checking HTML files for CDN resources..."
          for file in $HTML_FILES; do
            if [ -f "$file" ]; then
              for pattern in "${CDN_PATTERNS[@]}"; do
                if grep -q "$pattern" "$file"; then
                  CDN_RESOURCES=$((CDN_RESOURCES + 1))
                  echo "Found CDN resource in $file: $pattern"
                  
                  # Check if SRI is present
                  if ! grep -A 1 -B 1 "$pattern" "$file" | grep -q "integrity="; then
                    MISSING_SRI=$((MISSING_SRI + 1))
                    echo "⚠️ Missing SRI for CDN resource in $file"
                  fi
                fi
              done
            fi
          done
          
          echo "📄 Checking JavaScript/TypeScript files for dynamic CDN loading..."
          for file in $JS_FILES $TS_FILES; do
            if [ -f "$file" ]; then
              for pattern in "${CDN_PATTERNS[@]}"; do
                if grep -q "$pattern" "$file"; then
                  CDN_RESOURCES=$((CDN_RESOURCES + 1))
                  echo "Found CDN reference in $file: $pattern"
                  echo "⚠️ Dynamic CDN loading detected - manual SRI validation required"
                fi
              done
            fi
          done
          
          echo "cdn-resources=$CDN_RESOURCES" >> $GITHUB_OUTPUT
          echo "missing-sri=$MISSING_SRI" >> $GITHUB_OUTPUT
          
          echo "📊 CDN Resource Summary:"
          echo "Total CDN Resources: $CDN_RESOURCES"
          echo "Missing SRI: $MISSING_SRI"

      - name: Generate SRI Hashes for Known Resources
        id: sri-generation
        run: |
          echo "🔐 Generating SRI hashes for common CDN resources..."
          
          # Create SRI reference file for common resources
          cat > sri-reference.json << 'EOF'
          {
            "common_cdn_resources": {
              "bootstrap": {
                "css": "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css",
                "js": "https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"
              },
              "jquery": {
                "js": "https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js"
              },
              "fontawesome": {
                "css": "https://use.fontawesome.com/releases/v6.0.0/css/all.css"
              }
            },
            "generation_date": "$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          }
          EOF
          
          echo "✅ SRI reference file created"

      - name: SRI Gate Check
        id: sri-gate
        run: |
          CDN_RESOURCES="${{ steps.cdn-scan.outputs.cdn-resources }}"
          MISSING_SRI="${{ steps.cdn-scan.outputs.missing-sri }}"
          
          echo "🚪 SRI Gate Validation:"
          echo "- CDN Resources Found: $CDN_RESOURCES"
          echo "- Missing SRI: $MISSING_SRI"
          
          if [ "$CDN_RESOURCES" -eq 0 ]; then
            echo "✅ PASSED: No CDN resources requiring SRI validation"
            echo "passed=true" >> $GITHUB_OUTPUT
          elif [ "$MISSING_SRI" -eq 0 ]; then
            echo "✅ PASSED: All CDN resources have SRI validation"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "⚠️ WARNING: $MISSING_SRI CDN resources missing SRI validation"
            echo "This is a warning, not a failure - manual review recommended"
            echo "passed=true" >> $GITHUB_OUTPUT  # Don't fail build for SRI warnings
          fi

      - name: Upload SRI Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sri-reports-${{ github.run_id }}
          path: |
            sri-reference.json
          retention-days: 30

  # ===== Security Notifications and Reporting =====
  security-notifications:
    name: 📢 Security Notifications
    runs-on: ubuntu-latest
    needs: [snyk-security-scan, package-integrity-scan, subresource-integrity-check]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Security Reports
        uses: actions/download-artifact@v4
        with:
          pattern: "*-reports-${{ github.run_id }}"
          path: security-reports
          merge-multiple: true

      - name: Generate Security Summary
        id: security-summary
        run: |
          SNYK_CRITICAL="${{ needs.snyk-security-scan.outputs.snyk-critical-count }}"
          SNYK_HIGH="${{ needs.snyk-security-scan.outputs.snyk-high-count }}"
          SNYK_PASSED="${{ needs.snyk-security-scan.outputs.snyk-passed }}"
          INTEGRITY_PASSED="${{ needs.package-integrity-scan.outputs.integrity-passed }}"
          LICENSE_PASSED="${{ needs.package-integrity-scan.outputs.license-passed }}"
          SRI_PASSED="${{ needs.subresource-integrity-check.outputs.sri-passed }}"
          
          # Calculate overall security status
          OVERALL_PASSED="true"
          if [ "$SNYK_PASSED" != "true" ] || [ "$INTEGRITY_PASSED" != "true" ] || [ "$LICENSE_PASSED" != "true" ]; then
            OVERALL_PASSED="false"
          fi
          
          # Determine alert level
          if [ "$SNYK_CRITICAL" -gt 0 ]; then
            ALERT_LEVEL="critical"
            ALERT_EMOJI="🚨"
          elif [ "$SNYK_HIGH" -gt 3 ] || [ "$OVERALL_PASSED" != "true" ]; then
            ALERT_LEVEL="high"
            ALERT_EMOJI="⚠️"
          elif [ "$SNYK_HIGH" -gt 0 ]; then
            ALERT_LEVEL="medium"
            ALERT_EMOJI="🔶"
          else
            ALERT_LEVEL="low"
            ALERT_EMOJI="✅"
          fi
          
          echo "overall-passed=$OVERALL_PASSED" >> $GITHUB_OUTPUT
          echo "alert-level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
          echo "alert-emoji=$ALERT_EMOJI" >> $GITHUB_OUTPUT
          
          # Generate notification summary
          cat > security-notification-summary.md << EOF
          # $ALERT_EMOJI Security Scan Summary - $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Overall Status: $(if [ "$OVERALL_PASSED" = "true" ]; then echo "✅ PASSED"; else echo "❌ FAILED"; fi)
          
          ## Security Scan Results
          
          | Component | Status | Critical | High | Details |
          |-----------|--------|----------|------|---------|
          | 🔍 Snyk Scan | $(if [ "$SNYK_PASSED" = "true" ]; then echo "✅ PASS"; else echo "❌ FAIL"; fi) | $SNYK_CRITICAL | $SNYK_HIGH | Comprehensive vulnerability scan |
          | 📦 Package Integrity | $(if [ "$INTEGRITY_PASSED" = "true" ]; then echo "✅ PASS"; else echo "❌ FAIL"; fi) | - | - | Package integrity validation |
          | 📄 License Compliance | $(if [ "$LICENSE_PASSED" = "true" ]; then echo "✅ PASS"; else echo "❌ FAIL"; fi) | - | - | License compatibility check |
          | 🔗 SRI Validation | $(if [ "$SRI_PASSED" = "true" ]; then echo "✅ PASS"; else echo "⚠️ WARN"; fi) | - | - | Subresource integrity check |
          
          ## Alert Level: **$ALERT_LEVEL** $ALERT_EMOJI
          
          ## Action Required
          $(if [ "$ALERT_LEVEL" = "critical" ]; then
            echo "🚨 **IMMEDIATE ACTION REQUIRED**: Critical vulnerabilities detected"
          elif [ "$ALERT_LEVEL" = "high" ]; then
            echo "⚠️ **HIGH PRIORITY**: Review and address security issues promptly"
          elif [ "$ALERT_LEVEL" = "medium" ]; then
            echo "🔶 **MEDIUM PRIORITY**: Schedule security review and updates"
          else
            echo "✅ **MONITORING**: Continue regular security monitoring"
          fi)
          
          ## Repository: ${{ github.repository }}
          ## Branch: ${{ github.ref_name }}
          ## Commit: ${{ github.sha }}
          ## Workflow: ${{ github.workflow }}
          EOF

      - name: Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-notification-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

      - name: Create GitHub Issue for Critical Vulnerabilities
        if: needs.snyk-security-scan.outputs.snyk-critical-count > 0
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-notification-summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Critical Security Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`,
              body: `${summary}\n\n**Auto-generated by Security Workflow**\n\nCC: @enrique`,
              labels: ['security', 'critical', 'vulnerability', 'automated']
            });

      - name: Send Webhook Notification (if configured)
        if: steps.security-summary.outputs.alert-level == 'critical' || steps.security-summary.outputs.alert-level == 'high'
        run: |
          if [ ! -z "${{ secrets.SECURITY_WEBHOOK_URL }}" ]; then
            echo "📢 Sending security alert webhook..."
            
            PAYLOAD=$(cat << EOF
            {
              "text": "${{ steps.security-summary.outputs.alert-emoji }} Security Alert: ${{ steps.security-summary.outputs.alert-level }} priority security issues detected in ${{ github.repository }}",
              "repository": "${{ github.repository }}",
              "branch": "${{ github.ref_name }}",
              "commit": "${{ github.sha }}",
              "workflow_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
              "alert_level": "${{ steps.security-summary.outputs.alert-level }}",
              "critical_count": "${{ needs.snyk-security-scan.outputs.snyk-critical-count }}",
              "high_count": "${{ needs.snyk-security-scan.outputs.snyk-high-count }}"
            }
            EOF
            )
            
            curl -X POST \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "${{ secrets.SECURITY_WEBHOOK_URL }}" || echo "Webhook notification failed"
          else
            echo "ℹ️ No webhook URL configured - skipping notification"
          fi

      - name: Upload Security Summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-summary-${{ github.run_id }}
          path: |
            security-notification-summary.md
            security-reports/
          retention-days: 90

  # ===== Security Gate Validation =====
  security-gate-validation:
    name: 🚪 Security Gate Validation
    runs-on: ubuntu-latest
    needs: [snyk-security-scan, package-integrity-scan, subresource-integrity-check]
    
    outputs:
      security-gate-passed: ${{ steps.final-gate.outputs.passed }}
    
    steps:
      - name: Final Security Gate Check
        id: final-gate
        run: |
          SNYK_PASSED="${{ needs.snyk-security-scan.outputs.snyk-passed }}"
          INTEGRITY_PASSED="${{ needs.package-integrity-scan.outputs.integrity-passed }}"
          LICENSE_PASSED="${{ needs.package-integrity-scan.outputs.license-passed }}"
          SRI_PASSED="${{ needs.subresource-integrity-check.outputs.sri-passed }}"
          
          echo "🚪 Final Security Gate Validation:"
          echo "- Snyk Security Scan: $SNYK_PASSED"
          echo "- Package Integrity: $INTEGRITY_PASSED"
          echo "- License Compliance: $LICENSE_PASSED"
          echo "- SRI Validation: $SRI_PASSED"
          echo ""
          
          # All critical gates must pass
          if [ "$SNYK_PASSED" = "true" ] && [ "$INTEGRITY_PASSED" = "true" ] && [ "$LICENSE_PASSED" = "true" ]; then
            echo "✅ SECURITY GATE PASSED: All critical security checks passed"
            echo "Note: SRI validation is advisory and does not fail the security gate"
            echo "passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ SECURITY GATE FAILED: One or more critical security checks failed"
            echo "passed=false" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Security Gate Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          ## 🛡️ Security Gate Results
          
          | Component | Status | Description |
          |-----------|--------|-------------|
          | 🔍 Snyk Scan | ${{ needs.snyk-security-scan.outputs.snyk-passed == 'true' && '✅ PASS' || '❌ FAIL' }} | Vulnerability scanning with Snyk |
          | 📦 Package Integrity | ${{ needs.package-integrity-scan.outputs.integrity-passed == 'true' && '✅ PASS' || '❌ FAIL' }} | Package integrity validation |
          | 📄 License Compliance | ${{ needs.package-integrity-scan.outputs.license-passed == 'true' && '✅ PASS' || '❌ FAIL' }} | License compatibility check |
          | 🔗 SRI Validation | ${{ needs.subresource-integrity-check.outputs.sri-passed == 'true' && '✅ PASS' || '⚠️ WARN' }} | Subresource integrity validation |
          
          **Overall Status**: ${{ steps.final-gate.outputs.passed == 'true' && '✅ **SECURITY GATE PASSED**' || '❌ **SECURITY GATE FAILED**' }}
          
          **Critical Vulnerabilities**: ${{ needs.snyk-security-scan.outputs.snyk-critical-count }}
          **High Vulnerabilities**: ${{ needs.snyk-security-scan.outputs.snyk-high-count }}
          EOF